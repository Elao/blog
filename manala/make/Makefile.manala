.DEFAULT_GOAL := help
.PHONY: help confirm manala

#############
# Variables #
#############

# !!! Please, don't expose MANALA_* variables in your project, !!!
# !!! use your template Makefile to define custom mapped ones  !!!

# MANALA             [Empty]|1 Run in manala powered platform
# MANALA_CURRENT_DIR [String]  Current directory
# MANALA_DIR         [String]  Manala base directory
# MANALA_ENV         [String]  Environment
# MANALA_HELP        [String]  Help content
# MANALA_INTERACTIVE [Empty]|1 Run in interactive mode

# Current dir
MANALA_CURRENT_DIR = $(CURDIR)

# Colors
MANALA_COLOR_RESET   = \033[0m
MANALA_COLOR_ERROR   = \033[31m
MANALA_COLOR_INFO    = \033[32m
MANALA_COLOR_WARNING = \033[33m
MANALA_COLOR_COMMENT = \033[36m

########
# Help #
########

MANALA_HELP = \
	$(MANALA_COLOR_COMMENT)Usage:$(MANALA_COLOR_RESET)\
	\n  make [target]\n\
	\n$(MANALA_COLOR_COMMENT)Help:$(MANALA_COLOR_RESET)\
	\n  $(MANALA_COLOR_INFO)help:$(MANALA_COLOR_RESET) This help\
	\n

help:
	@printf "$(MANALA_HELP)"
ifneq ($(MANALA_CURRENT_DIR),$(MANALA_DIR))
	@printf "\n$(MANALA_COLOR_COMMENT)Application:$(MANALA_COLOR_RESET)\n"
	@awk '/^[a-zA-Z\-\_0-9\.@%]+:/ { \
		helpMessage = match(lastLine, /^## (.*)/); \
		if (helpMessage) { \
			helpCommand = substr($$1, 0, index($$1, ":")); \
			helpMessage = substr(lastLine, RSTART + 3, RLENGTH); \
			printf "  $(MANALA_COLOR_INFO)%-20s$(MANALA_COLOR_RESET) %s\n", helpCommand, helpMessage; \
		} \
	} \
	{ lastLine = $$0 }' $(MAKEFILE_LIST)
endif
	@printf "\n"

###############
# Environment #
###############

MANALA_ENV ?= development

# Target prerequisite to force it to be run locally
# 
# foo: @local
# 	bar
@local:
ifneq ($(MANALA),)
	@$(call log_error,Must be run locally)
	@exit 1
endif

###############
# Interactive #
###############

MANALA_INTERACTIVE := $(shell [ -t 0 ] && echo 1)

#######
# Log #
#######

define log
    printf "\n[$(MANALA_COLOR_COMMENT)$(shell date +"%T")$(MANALA_COLOR_RESET)][$(MANALA_COLOR_COMMENT)$(@)$(MANALA_COLOR_RESET)] $(MANALA_COLOR_INFO)$(1)$(MANALA_COLOR_RESET)\n\n"
endef

# Warning
define log_warning
    printf "\n[$(MANALA_COLOR_COMMENT)¯\_(ツ)_/¯$(MANALA_COLOR_RESET)] $(MANALA_COLOR_WARNING)$(1)$(MANALA_COLOR_RESET)\n\n"
endef

# Error
define log_error
    printf "\n[$(MANALA_COLOR_COMMENT)(╯°□°)╯︵ ┻━┻$(MANALA_COLOR_RESET)] $(MANALA_COLOR_ERROR)$(1)$(MANALA_COLOR_RESET)\n\n"
endef

###########
# Confirm #
###########

confirm:
	@printf "\n$(MANALA_COLOR_INFO) ༼ つ ◕_◕ ༽つ $(MANALA_COLOR_WARNING)$(if $(CONFIRM_MESSAGE),$(CONFIRM_MESSAGE),Please confirm) (y/N)$(MANALA_COLOR_RESET): "
	@read CONFIRM ; if [ "$$CONFIRM" != "y" ]; then exit 1; fi

##########
# Manala #
##########

manala:
	@curl -s -L http://bit.ly/10hA8iC | bash

########
# Yaml #
########

# See: https://gist.github.com/pkuczynski/8665367
define yaml_parse_new_line


endef
define yaml_parse
    $(subst [[|]],$(yaml_parse_new_line),$(shell prefix=$2 ; \
		space='[[:space:]]*' ; \
		word='[a-zA-Z0-9_]*' ; \
		fs=$(shell echo @|tr @ '\034') ; \
		sed -ne "s|^\($$space\)\($$word\)$$space:$$space\"\(.*\)\"$$space\$$|\1$$fs\2$$fs\3|p" \
			-e "s|^\($$space\)\($$word\)$$space:$$space\(.*\)$$space\$$|\1$$fs\2$$fs\3|p" $1 | \
		awk -F$$fs '{ \
		  indent = length($$1)/2; \
		  vname[indent] = $$2; \
		  for (i in vname) {if (i > indent) {delete vname[i]}} \
		  if (length($$3) > 0) { \
			 vn=""; for (i=0; i<indent; i++) {vn=(vn)(vname[i])("_")} \
			 printf("%s%s%s=\"%s\"[[|]]", "'$$prefix'",vn, $$2, $$3); \
		  } \
		}' \
	))
endef

$(eval $(call yaml_parse,$(MANALA_DIR)/manifest.yaml))
$(eval $(call yaml_parse,$(MANALA_DIR)/../manala.yaml))
